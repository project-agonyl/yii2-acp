<?php
// This class was automatically generated by a giiant build task
// You should not change it manually as it will be overwritten on next build

namespace common\models\base;

use Yii;
use yii\behaviors\TimestampBehavior;

/**
 * This is the base-model class for table "item_info".
 *
 * @property integer $id
 * @property integer $item_id
 * @property integer $level
 * @property integer $strength
 * @property integer $intelligence
 * @property integer $dexterity
 * @property integer $damage
 * @property integer $incremental_damage
 * @property integer $max_ice_elements
 * @property integer $max_fire_elements
 * @property integer $max_light_elements
 * @property integer $additional_stats
 * @property string $meta
 * @property string $created_at
 * @property string $updated_at
 *
 * @property \common\models\Item $item
 * @property string $aliasModel
 */
abstract class ItemInfo extends \yii\db\ActiveRecord
{



    /**
     * @inheritdoc
     */
    public static function tableName()
    {
        return 'item_info';
    }


    /**
     * @inheritdoc
     */
    public function behaviors()
    {
        return [
            [
                'class' => TimestampBehavior::className(),
            ],
        ];
    }

    /**
     * @inheritdoc
     */
    public function rules()
    {
        return [
            [['item_id'], 'required'],
            [['item_id', 'level', 'strength', 'intelligence', 'dexterity', 'damage', 'incremental_damage', 'max_ice_elements', 'max_fire_elements', 'max_light_elements', 'additional_stats'], 'integer'],
            [['meta'], 'string'],
            [['item_id'], 'exist', 'skipOnError' => true, 'targetClass' => \common\models\Item::className(), 'targetAttribute' => ['item_id' => 'id']]
        ];
    }

    /**
     * @inheritdoc
     */
    public function attributeLabels()
    {
        return [
            'id' => 'ID',
            'item_id' => 'Item ID',
            'level' => 'Level',
            'strength' => 'Strength',
            'intelligence' => 'Intelligence',
            'dexterity' => 'Dexterity',
            'damage' => 'Damage',
            'incremental_damage' => 'Incremental Damage',
            'max_ice_elements' => 'Max Ice Elements',
            'max_fire_elements' => 'Max Fire Elements',
            'max_light_elements' => 'Max Light Elements',
            'additional_stats' => 'Additional Stats',
            'meta' => 'Meta',
            'created_at' => 'Created At',
            'updated_at' => 'Updated At',
        ];
    }

    /**
     * @return \yii\db\ActiveQuery
     */
    public function getItem()
    {
        return $this->hasOne(\common\models\Item::className(), ['id' => 'item_id']);
    }


    
    /**
     * @inheritdoc
     * @return \common\models\query\ItemInfoQuery the active query used by this AR class.
     */
    public static function find()
    {
        return new \common\models\query\ItemInfoQuery(get_called_class());
    }


}
